{"version":3,"file":"index.js","sources":["../webpack://heroku-deploy/./lib/index.js","../webpack://heroku-deploy/./node_modules/@actions/core/lib/command.js","../webpack://heroku-deploy/./node_modules/@actions/core/lib/core.js","../webpack://heroku-deploy/./node_modules/@actions/core/lib/file-command.js","../webpack://heroku-deploy/./node_modules/@actions/core/lib/utils.js","../webpack://heroku-deploy/./node_modules/centra/createRequest.js","../webpack://heroku-deploy/./node_modules/centra/model/CentraRequest.js","../webpack://heroku-deploy/./node_modules/centra/model/CentraResponse.js","../webpack://heroku-deploy/./node_modules/phin/lib/phin.js","../webpack://heroku-deploy/./node_modules/@vercel/ncc/dist/ncc/@@notfound.js","../webpack://heroku-deploy/external \"child_process\"","../webpack://heroku-deploy/external \"fs\"","../webpack://heroku-deploy/external \"http\"","../webpack://heroku-deploy/external \"https\"","../webpack://heroku-deploy/external \"os\"","../webpack://heroku-deploy/external \"path\"","../webpack://heroku-deploy/external \"querystring\"","../webpack://heroku-deploy/external \"url\"","../webpack://heroku-deploy/external \"zlib\"","../webpack://heroku-deploy/webpack/bootstrap","../webpack://heroku-deploy/webpack/runtime/compat","../webpack://heroku-deploy/webpack/startup"],"sourcesContent":["\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nconst p = require(\"phin\");\r\nconst core = require(\"@actions/core\");\r\nconst { execSync } = require(\"child_process\");\r\nconst fs = require(\"fs\");\r\nconst path = require(\"path\");\r\n// Support Functions\r\nconst sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\r\nconst createCatFile = ({ email, api_key }) => `cat >~/.netrc <<EOF\r\nmachine api.heroku.com\r\n    login ${email}\r\n    password ${api_key}\r\nmachine git.heroku.com\r\n    login ${email}\r\n    password ${api_key}\r\nEOF`;\r\nconst addRemote = ({ app_name, dontautocreate, buildpack, region, team, stack }) => {\r\n    try {\r\n        execSync(\"heroku git:remote --app \" + app_name);\r\n        console.log(\"Added git remote heroku\");\r\n    }\r\n    catch (err) {\r\n        if (dontautocreate)\r\n            throw err;\r\n        execSync(\"heroku create \" +\r\n            app_name +\r\n            (buildpack ? \" --buildpack \" + buildpack : \"\") +\r\n            (region ? \" --region \" + region : \"\") +\r\n            (stack ? \" --stack \" + stack : \"\") +\r\n            (team ? \" --team \" + team : \"\"));\r\n    }\r\n};\r\nconst addConfig = ({ app_name, env_file, appdir }) => {\r\n    let configVars = [];\r\n    for (let key in process.env) {\r\n        if (key.startsWith(\"HD_\")) {\r\n            configVars.push(key.substring(3) + \"='\" + process.env[key] + \"'\");\r\n        }\r\n    }\r\n    if (env_file) {\r\n        const env = fs.readFileSync(path.join(appdir, env_file), \"utf8\");\r\n        const variables = require(\"dotenv\").parse(env);\r\n        const newVars = [];\r\n        for (let key in variables) {\r\n            newVars.push(key + \"=\" + variables[key]);\r\n        }\r\n        configVars = [...configVars, ...newVars];\r\n    }\r\n    if (configVars.length !== 0) {\r\n        execSync(`heroku config:set --app=${app_name} ${configVars.join(\" \")}`);\r\n    }\r\n};\r\nconst createProcfile = ({ procfile, appdir }) => {\r\n    if (procfile) {\r\n        fs.writeFileSync(path.join(appdir, \"Procfile\"), procfile);\r\n        execSync(`git add -A && git commit -m \"Added Procfile\"`);\r\n        console.log(\"Written Procfile with custom configuration\");\r\n    }\r\n};\r\nconst deploy = ({ dontuseforce, app_name, branch, usedocker, dockerHerokuProcessType, dockerBuildArgs, appdir, }) => {\r\n    const force = !dontuseforce ? \"--force\" : \"\";\r\n    if (usedocker) {\r\n        execSync(`heroku container:push ${dockerHerokuProcessType} --app ${app_name} ${dockerBuildArgs}`, appdir ? { cwd: appdir } : null);\r\n        execSync(`heroku container:release ${dockerHerokuProcessType} --app ${app_name}`, appdir ? { cwd: appdir } : null);\r\n    }\r\n    else {\r\n        let remote_branch = execSync(\"git remote show heroku | grep 'HEAD' | cut -d':' -f2 | sed -e 's/^ *//g' -e 's/ *$//g'\")\r\n            .toString()\r\n            .trim();\r\n        if (remote_branch === \"master\") {\r\n            execSync(\"heroku plugins:install heroku-repo\");\r\n            execSync(\"heroku repo:reset -a \" + app_name);\r\n        }\r\n        if (appdir === \"\") {\r\n            execSync(`git push heroku ${branch}:refs/heads/main ${force}`, {\r\n                maxBuffer: 104857600,\r\n            });\r\n        }\r\n        else {\r\n            execSync(`git push ${force} heroku \\`git subtree split --prefix=${appdir} ${branch}\\`:refs/heads/main`, { maxBuffer: 104857600 });\r\n        }\r\n    }\r\n};\r\nconst healthcheckFailed = ({ rollbackonhealthcheckfailed, app_name, appdir, }) => {\r\n    if (rollbackonhealthcheckfailed) {\r\n        execSync(`heroku rollback --app ${app_name}`, appdir ? { cwd: appdir } : null);\r\n        core.setFailed(\"Health Check Failed. Error deploying Server. Deployment has been rolled back. Please check your logs on Heroku to try and diagnose the problem\");\r\n    }\r\n    else {\r\n        core.setFailed(\"Health Check Failed. Error deploying Server. Please check your logs on Heroku to try and diagnose the problem\");\r\n    }\r\n};\r\n// Input Variables\r\nlet heroku = {\r\n    api_key: core.getInput(\"heroku_api_key\"),\r\n    email: core.getInput(\"heroku_email\"),\r\n    app_name: core.getInput(\"heroku_app_name\"),\r\n    buildpack: core.getInput(\"buildpack\"),\r\n    branch: core.getInput(\"branch\"),\r\n    dontuseforce: core.getInput(\"dontuseforce\") === \"false\" ? false : true,\r\n    dontautocreate: core.getInput(\"dontautocreate\") === \"false\" ? false : true,\r\n    usedocker: core.getInput(\"usedocker\") === \"false\" ? false : true,\r\n    dockerHerokuProcessType: core.getInput(\"docker_heroku_process_type\"),\r\n    dockerBuildArgs: core.getInput(\"docker_build_args\"),\r\n    appdir: core.getInput(\"appdir\"),\r\n    healthcheck: core.getInput(\"healthcheck\"),\r\n    checkstring: core.getInput(\"checkstring\"),\r\n    delay: parseInt(core.getInput(\"delay\")),\r\n    procfile: core.getInput(\"procfile\"),\r\n    rollbackonhealthcheckfailed: core.getInput(\"rollbackonhealthcheckfailed\") === \"false\" ? false : true,\r\n    env_file: core.getInput(\"env_file\"),\r\n    justlogin: core.getInput(\"justlogin\") === \"false\" ? false : true,\r\n    region: core.getInput(\"region\"),\r\n    stack: core.getInput(\"stack\"),\r\n    team: core.getInput(\"team\"),\r\n};\r\n// Formatting\r\nif (heroku.appdir) {\r\n    heroku.appdir =\r\n        heroku.appdir[0] === \".\" && heroku.appdir[1] === \"/\"\r\n            ? heroku.appdir.slice(2)\r\n            : heroku.appdir[0] === \"/\"\r\n                ? heroku.appdir.slice(1)\r\n                : heroku.appdir;\r\n}\r\n// Collate docker build args into arg list\r\nif (heroku.dockerBuildArgs) {\r\n    heroku.dockerBuildArgs = heroku.dockerBuildArgs\r\n        .split(\"\\n\")\r\n        .map((arg) => `${arg}=\"${process.env[arg]}\"`)\r\n        .join(\",\");\r\n    heroku.dockerBuildArgs = heroku.dockerBuildArgs\r\n        ? `--arg ${heroku.dockerBuildArgs}`\r\n        : \"\";\r\n}\r\n(() => __awaiter(void 0, void 0, void 0, function* () {\r\n    // Program logic\r\n    try {\r\n        // Just Login\r\n        if (heroku.justlogin) {\r\n            execSync(createCatFile(heroku));\r\n            console.log(\"Created and wrote to ~/.netrc\");\r\n            return;\r\n        }\r\n        execSync(`git config user.name \"Heroku-Deploy\"`);\r\n        execSync(`git config user.email \"${heroku.email}\"`);\r\n        const status = execSync(\"git status --porcelain\").toString().trim();\r\n        if (status) {\r\n            execSync('git add -A && git commit -m \"Commited changes from previous actions\"');\r\n        }\r\n        // Check if using Docker\r\n        if (!heroku.usedocker) {\r\n            // Check if Repo clone is shallow\r\n            const isShallow = execSync(\"git rev-parse --is-shallow-repository\").toString();\r\n            // If the Repo clone is shallow, make it unshallow\r\n            if (isShallow === \"true\\n\") {\r\n                execSync(\"git fetch --prune --unshallow\");\r\n            }\r\n        }\r\n        execSync(createCatFile(heroku));\r\n        console.log(\"Created and wrote to ~/.netrc\");\r\n        createProcfile(heroku);\r\n        if (heroku.usedocker) {\r\n            execSync(\"heroku container:login\");\r\n        }\r\n        console.log(\"Successfully logged into heroku\");\r\n        addRemote(heroku);\r\n        addConfig(heroku);\r\n        try {\r\n            deploy(Object.assign(Object.assign({}, heroku), { dontuseforce: true }));\r\n        }\r\n        catch (err) {\r\n            console.error(`\r\n            Unable to push branch because the branch is behind the deployed branch. Using --force to deploy branch. \r\n            (If you want to avoid this, set dontuseforce to 1 in with: of .github/workflows/action.yml. \r\n            Specifically, the error was: ${err}\r\n        `);\r\n            deploy(heroku);\r\n        }\r\n        if (heroku.healthcheck) {\r\n            if (typeof heroku.delay === \"number\" && heroku.delay !== NaN) {\r\n                yield sleep(heroku.delay * 1000);\r\n            }\r\n            try {\r\n                const res = yield p(heroku.healthcheck);\r\n                if (res.statusCode !== 200) {\r\n                    throw new Error(\"Status code of network request is not 200: Status code - \" +\r\n                        res.statusCode);\r\n                }\r\n                if (heroku.checkstring && heroku.checkstring !== res.body.toString()) {\r\n                    throw new Error(\"Failed to match the checkstring\");\r\n                }\r\n                console.log(res.body.toString());\r\n            }\r\n            catch (err) {\r\n                console.log(err.message);\r\n                healthcheckFailed(heroku);\r\n            }\r\n        }\r\n        core.setOutput(\"status\", \"Successfully deployed heroku app from branch \" + heroku.branch);\r\n    }\r\n    catch (err) {\r\n        if (heroku.dontautocreate &&\r\n            err.toString().includes(\"Couldn't find that app\")) {\r\n            core.setOutput(\"status\", \"Skipped deploy to heroku app from branch \" + heroku.branch);\r\n        }\r\n        else {\r\n            core.setFailed(err.toString());\r\n        }\r\n    }\r\n}))();\r\n","\"use strict\";\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst os = __importStar(require(\"os\"));\nconst utils_1 = require(\"./utils\");\n/**\n * Commands\n *\n * Command Format:\n *   ::name key=value,key=value::message\n *\n * Examples:\n *   ::warning::This is the message\n *   ::set-env name=MY_VAR::some value\n */\nfunction issueCommand(command, properties, message) {\n    const cmd = new Command(command, properties, message);\n    process.stdout.write(cmd.toString() + os.EOL);\n}\nexports.issueCommand = issueCommand;\nfunction issue(name, message = '') {\n    issueCommand(name, {}, message);\n}\nexports.issue = issue;\nconst CMD_STRING = '::';\nclass Command {\n    constructor(command, properties, message) {\n        if (!command) {\n            command = 'missing.command';\n        }\n        this.command = command;\n        this.properties = properties;\n        this.message = message;\n    }\n    toString() {\n        let cmdStr = CMD_STRING + this.command;\n        if (this.properties && Object.keys(this.properties).length > 0) {\n            cmdStr += ' ';\n            let first = true;\n            for (const key in this.properties) {\n                if (this.properties.hasOwnProperty(key)) {\n                    const val = this.properties[key];\n                    if (val) {\n                        if (first) {\n                            first = false;\n                        }\n                        else {\n                            cmdStr += ',';\n                        }\n                        cmdStr += `${key}=${escapeProperty(val)}`;\n                    }\n                }\n            }\n        }\n        cmdStr += `${CMD_STRING}${escapeData(this.message)}`;\n        return cmdStr;\n    }\n}\nfunction escapeData(s) {\n    return utils_1.toCommandValue(s)\n        .replace(/%/g, '%25')\n        .replace(/\\r/g, '%0D')\n        .replace(/\\n/g, '%0A');\n}\nfunction escapeProperty(s) {\n    return utils_1.toCommandValue(s)\n        .replace(/%/g, '%25')\n        .replace(/\\r/g, '%0D')\n        .replace(/\\n/g, '%0A')\n        .replace(/:/g, '%3A')\n        .replace(/,/g, '%2C');\n}\n//# sourceMappingURL=command.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst command_1 = require(\"./command\");\nconst file_command_1 = require(\"./file-command\");\nconst utils_1 = require(\"./utils\");\nconst os = __importStar(require(\"os\"));\nconst path = __importStar(require(\"path\"));\n/**\n * The code to exit an action\n */\nvar ExitCode;\n(function (ExitCode) {\n    /**\n     * A code indicating that the action was successful\n     */\n    ExitCode[ExitCode[\"Success\"] = 0] = \"Success\";\n    /**\n     * A code indicating that the action was a failure\n     */\n    ExitCode[ExitCode[\"Failure\"] = 1] = \"Failure\";\n})(ExitCode = exports.ExitCode || (exports.ExitCode = {}));\n//-----------------------------------------------------------------------\n// Variables\n//-----------------------------------------------------------------------\n/**\n * Sets env variable for this action and future actions in the job\n * @param name the name of the variable to set\n * @param val the value of the variable. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction exportVariable(name, val) {\n    const convertedVal = utils_1.toCommandValue(val);\n    process.env[name] = convertedVal;\n    const filePath = process.env['GITHUB_ENV'] || '';\n    if (filePath) {\n        const delimiter = '_GitHubActionsFileCommandDelimeter_';\n        const commandValue = `${name}<<${delimiter}${os.EOL}${convertedVal}${os.EOL}${delimiter}`;\n        file_command_1.issueCommand('ENV', commandValue);\n    }\n    else {\n        command_1.issueCommand('set-env', { name }, convertedVal);\n    }\n}\nexports.exportVariable = exportVariable;\n/**\n * Registers a secret which will get masked from logs\n * @param secret value of the secret\n */\nfunction setSecret(secret) {\n    command_1.issueCommand('add-mask', {}, secret);\n}\nexports.setSecret = setSecret;\n/**\n * Prepends inputPath to the PATH (for this action and future actions)\n * @param inputPath\n */\nfunction addPath(inputPath) {\n    const filePath = process.env['GITHUB_PATH'] || '';\n    if (filePath) {\n        file_command_1.issueCommand('PATH', inputPath);\n    }\n    else {\n        command_1.issueCommand('add-path', {}, inputPath);\n    }\n    process.env['PATH'] = `${inputPath}${path.delimiter}${process.env['PATH']}`;\n}\nexports.addPath = addPath;\n/**\n * Gets the value of an input.  The value is also trimmed.\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   string\n */\nfunction getInput(name, options) {\n    const val = process.env[`INPUT_${name.replace(/ /g, '_').toUpperCase()}`] || '';\n    if (options && options.required && !val) {\n        throw new Error(`Input required and not supplied: ${name}`);\n    }\n    return val.trim();\n}\nexports.getInput = getInput;\n/**\n * Sets the value of an output.\n *\n * @param     name     name of the output to set\n * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction setOutput(name, value) {\n    command_1.issueCommand('set-output', { name }, value);\n}\nexports.setOutput = setOutput;\n/**\n * Enables or disables the echoing of commands into stdout for the rest of the step.\n * Echoing is disabled by default if ACTIONS_STEP_DEBUG is not set.\n *\n */\nfunction setCommandEcho(enabled) {\n    command_1.issue('echo', enabled ? 'on' : 'off');\n}\nexports.setCommandEcho = setCommandEcho;\n//-----------------------------------------------------------------------\n// Results\n//-----------------------------------------------------------------------\n/**\n * Sets the action status to failed.\n * When the action exits it will be with an exit code of 1\n * @param message add error issue message\n */\nfunction setFailed(message) {\n    process.exitCode = ExitCode.Failure;\n    error(message);\n}\nexports.setFailed = setFailed;\n//-----------------------------------------------------------------------\n// Logging Commands\n//-----------------------------------------------------------------------\n/**\n * Gets whether Actions Step Debug is on or not\n */\nfunction isDebug() {\n    return process.env['RUNNER_DEBUG'] === '1';\n}\nexports.isDebug = isDebug;\n/**\n * Writes debug message to user log\n * @param message debug message\n */\nfunction debug(message) {\n    command_1.issueCommand('debug', {}, message);\n}\nexports.debug = debug;\n/**\n * Adds an error issue\n * @param message error issue message. Errors will be converted to string via toString()\n */\nfunction error(message) {\n    command_1.issue('error', message instanceof Error ? message.toString() : message);\n}\nexports.error = error;\n/**\n * Adds an warning issue\n * @param message warning issue message. Errors will be converted to string via toString()\n */\nfunction warning(message) {\n    command_1.issue('warning', message instanceof Error ? message.toString() : message);\n}\nexports.warning = warning;\n/**\n * Writes info to log with console.log.\n * @param message info message\n */\nfunction info(message) {\n    process.stdout.write(message + os.EOL);\n}\nexports.info = info;\n/**\n * Begin an output group.\n *\n * Output until the next `groupEnd` will be foldable in this group\n *\n * @param name The name of the output group\n */\nfunction startGroup(name) {\n    command_1.issue('group', name);\n}\nexports.startGroup = startGroup;\n/**\n * End an output group.\n */\nfunction endGroup() {\n    command_1.issue('endgroup');\n}\nexports.endGroup = endGroup;\n/**\n * Wrap an asynchronous function call in a group.\n *\n * Returns the same type as the function itself.\n *\n * @param name The name of the group\n * @param fn The function to wrap in the group\n */\nfunction group(name, fn) {\n    return __awaiter(this, void 0, void 0, function* () {\n        startGroup(name);\n        let result;\n        try {\n            result = yield fn();\n        }\n        finally {\n            endGroup();\n        }\n        return result;\n    });\n}\nexports.group = group;\n//-----------------------------------------------------------------------\n// Wrapper action state\n//-----------------------------------------------------------------------\n/**\n * Saves state for current action, the state can only be retrieved by this action's post job execution.\n *\n * @param     name     name of the state to store\n * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction saveState(name, value) {\n    command_1.issueCommand('save-state', { name }, value);\n}\nexports.saveState = saveState;\n/**\n * Gets the value of an state set by this action's main execution.\n *\n * @param     name     name of the state to get\n * @returns   string\n */\nfunction getState(name) {\n    return process.env[`STATE_${name}`] || '';\n}\nexports.getState = getState;\n//# sourceMappingURL=core.js.map","\"use strict\";\n// For internal use, subject to change.\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// We use any as a valid input type\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst fs = __importStar(require(\"fs\"));\nconst os = __importStar(require(\"os\"));\nconst utils_1 = require(\"./utils\");\nfunction issueCommand(command, message) {\n    const filePath = process.env[`GITHUB_${command}`];\n    if (!filePath) {\n        throw new Error(`Unable to find environment variable for file command ${command}`);\n    }\n    if (!fs.existsSync(filePath)) {\n        throw new Error(`Missing file at path: ${filePath}`);\n    }\n    fs.appendFileSync(filePath, `${utils_1.toCommandValue(message)}${os.EOL}`, {\n        encoding: 'utf8'\n    });\n}\nexports.issueCommand = issueCommand;\n//# sourceMappingURL=file-command.js.map","\"use strict\";\n// We use any as a valid input type\n/* eslint-disable @typescript-eslint/no-explicit-any */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Sanitizes an input into a string so it can be passed into issueCommand safely\n * @param input input to sanitize into a string\n */\nfunction toCommandValue(input) {\n    if (input === null || input === undefined) {\n        return '';\n    }\n    else if (typeof input === 'string' || input instanceof String) {\n        return input;\n    }\n    return JSON.stringify(input);\n}\nexports.toCommandValue = toCommandValue;\n//# sourceMappingURL=utils.js.map","const CentraRequest = require('./model/CentraRequest.js')\n\nmodule.exports = (url, method) => {\n\treturn new CentraRequest(url, method)\n}","const path = require('path')\nconst http = require('http')\nconst https = require('https')\nconst qs = require('querystring')\nconst zlib = require('zlib')\nconst {URL} = require('url')\n\nconst CentraResponse = require('./CentraResponse.js')\n\nconst supportedCompressions = ['gzip', 'deflate']\n\nmodule.exports = class CentraRequest {\n\tconstructor (url, method = 'GET') {\n\t\tthis.url = typeof url === 'string' ? new URL(url) : url\n\t\tthis.method = method\n\t\tthis.data = null\n\t\tthis.sendDataAs = null\n\t\tthis.reqHeaders = {}\n\t\tthis.streamEnabled = false\n\t\tthis.compressionEnabled = false\n\t\tthis.timeoutTime = null\n\t\tthis.coreOptions = {}\n\n\t\tthis.resOptions = {\n\t\t\t'maxBuffer': 50 * 1000000 // 50 MB\n\t\t}\n\n\t\treturn this\n\t}\n\n\tquery (a1, a2) {\n\t\tif (typeof a1 === 'object') {\n\t\t\tObject.keys(a1).forEach((queryKey) => {\n\t\t\t\tthis.url.searchParams.append(queryKey, a1[queryKey])\n\t\t\t})\n\t\t}\n\t\telse this.url.searchParams.append(a1, a2)\n\n\t\treturn this\n\t}\n\n\tpath (relativePath) {\n\t\tthis.url.pathname = path.join(this.url.pathname, relativePath)\n\n\t\treturn this\n\t}\n\n\tbody (data, sendAs) {\n\t\tthis.sendDataAs = typeof data === 'object' && !sendAs && !Buffer.isBuffer(data) ? 'json' : (sendAs ? sendAs.toLowerCase() : 'buffer')\n\t\tthis.data = this.sendDataAs === 'form' ? qs.stringify(data) : (this.sendDataAs === 'json' ? JSON.stringify(data) : data)\n\n\t\treturn this\n\t}\n\n\theader (a1, a2) {\n\t\tif (typeof a1 === 'object') {\n\t\t\tObject.keys(a1).forEach((headerName) => {\n\t\t\t\tthis.reqHeaders[headerName.toLowerCase()] = a1[headerName]\n\t\t\t})\n\t\t}\n\t\telse this.reqHeaders[a1.toLowerCase()] = a2\n\n\t\treturn this\n\t}\n\n\ttimeout (timeout) {\n\t\tthis.timeoutTime = timeout\n\n\t\treturn this\n\t}\n\n\toption (name, value) {\n\t\tthis.coreOptions[name] = value\n\n\t\treturn this\n\t}\n\n\tstream () {\n\t\tthis.streamEnabled = true\n\n\t\treturn this\n\t}\n\n\tcompress () {\n\t\tthis.compressionEnabled = true\n\n\t\tif (!this.reqHeaders['accept-encoding']) this.reqHeaders['accept-encoding'] = supportedCompressions.join(', ')\n\n\t\treturn this\n\t}\n\n\tsend () {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (this.data) {\n\t\t\t\tif (!this.reqHeaders.hasOwnProperty('content-type')) {\n\t\t\t\t\tif (this.sendDataAs === 'json') {\n\t\t\t\t\t\tthis.reqHeaders['content-type'] = 'application/json'\n\t\t\t\t\t}\n\t\t\t\t\telse if (this.sendDataAs === 'form') {\n\t\t\t\t\t\tthis.reqHeaders['content-type'] = 'application/x-www-form-urlencoded'\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!this.reqHeaders.hasOwnProperty('content-length')) {\n\t\t\t\t\tthis.reqHeaders['content-length'] = Buffer.byteLength(this.data)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst options = Object.assign({\n\t\t\t\t'protocol': this.url.protocol,\n\t\t\t\t'host': this.url.hostname,\n\t\t\t\t'port': this.url.port,\n\t\t\t\t'path': this.url.pathname + (this.url.search === null ? '' : this.url.search),\n\t\t\t\t'method': this.method,\n\t\t\t\t'headers': this.reqHeaders\n\t\t\t}, this.coreOptions)\n\n\t\t\tlet req\n\n\t\t\tconst resHandler = (res) => {\n\t\t\t\tlet stream = res\n\n\t\t\t\tif (this.compressionEnabled) {\n\t\t\t\t\tif (res.headers['content-encoding'] === 'gzip') {\n\t\t\t\t\t\tstream = res.pipe(zlib.createGunzip())\n\t\t\t\t\t}\n\t\t\t\t\telse if (res.headers['content-encoding'] === 'deflate') {\n\t\t\t\t\t\tstream = res.pipe(zlib.createInflate())\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlet centraRes\n\n\t\t\t\tif (this.streamEnabled) {\n\t\t\t\t\tresolve(stream)\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcentraRes = new CentraResponse(res, this.resOptions)\n\n\t\t\t\t\tstream.on('error', (err) => {\n\t\t\t\t\t\treject(err)\n\t\t\t\t\t})\n\n\t\t\t\t\tstream.on('data', (chunk) => {\n\t\t\t\t\t\tcentraRes._addChunk(chunk)\n\n\t\t\t\t\t\tif (this.resOptions.maxBuffer !== null && centraRes.body.length > this.resOptions.maxBuffer) {\n\t\t\t\t\t\t\tstream.destroy()\n\n\t\t\t\t\t\t\treject('Received a response which was longer than acceptable when buffering. (' + this.body.length + ' bytes)')\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\n\t\t\t\t\tstream.on('end', () => {\n\t\t\t\t\t\tresolve(centraRes)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.url.protocol === 'http:') {\n\t\t\t\treq = http.request(options, resHandler)\n\t\t\t}\n\t\t\telse if (this.url.protocol === 'https:') {\n\t\t\t\treq = https.request(options, resHandler)\n\t\t\t}\n\t\t\telse throw new Error('Bad URL protocol: ' + this.url.protocol)\n\n\t\t\tif (this.timeoutTime) {\n\t\t\t\treq.setTimeout(this.timeoutTime, () => {\n\t\t\t\t\treq.abort()\n\n\t\t\t\t\tif (!this.streamEnabled) {\n\t\t\t\t\t\treject(new Error('Timeout reached'))\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\n\t\t\treq.on('error', (err) => {\n\t\t\t\treject(err)\n\t\t\t})\n\n\t\t\tif (this.data) req.write(this.data)\n\n\t\t\treq.end()\n\t\t})\n\t}\n}\n","module.exports = class CentraResponse {\n\tconstructor (res, resOptions) {\n\t\tthis.coreRes = res\n\t\tthis.resOptions = resOptions\n\n\t\tthis.body = Buffer.alloc(0)\n\n\t\tthis.headers = res.headers\n\t\tthis.statusCode = res.statusCode\n\t}\n\n\t_addChunk (chunk) {\n\t\tthis.body = Buffer.concat([this.body, chunk])\n\t}\n\n\tasync json () {\n\t\treturn this.statusCode === 204 ? null : JSON.parse(this.body)\n\t}\n\n\tasync text () {\n\t\treturn this.body.toString()\n\t}\n}","const {URL} = require('url')\n\nconst centra = require('centra')\n\n/**\n* phin options object. phin also supports all options from <a href=\"https://nodejs.org/api/http.html#http_http_request_options_callback\">http.request(options, callback)</a> by passing them on to this method (or similar).\n* @typedef {Object} phinOptions\n* @property {string} url - URL to request (autodetect infers from this URL)\n* @property {string} [method=GET] - Request method ('GET', 'POST', etc.)\n* @property {string} [data] - Data to send as request body (phin may attempt to convert this data to a string if it isn't already)\n* @property {Object} [form] - Object to send as form data (sets 'Content-Type' and 'Content-Length' headers, as well as request body) (overwrites 'data' option if present)\n* @property {Object} [headers={}] - Request headers\n* @property {Object} [core={}] - Custom core HTTP options\n* @property {string} [parse=none] - Response parsing. Errors will be given if the response can't be parsed. ('none', 'json')\n* @property {boolean} [followRedirects=false] - Enable HTTP redirect following\n* @property {boolean} [stream=false] - Enable streaming of response. (Removes body property)\n* @property {boolean} [compression=false] - Enable compression for request\n* @property {?number} [timeout=null] - Request timeout in milliseconds\n* @property {string} [hostname=autodetect] - URL hostname\n* @property {Number} [port=autodetect] - URL port\n* @property {string} [path=autodetect] - URL path\n*/\n\n/**\n* Response data\n* @callback phinResponseCallback\n* @param {?(Error|string)} error - Error if any occurred in request, otherwise null.\n* @param {?http.serverResponse} phinResponse - phin response object. Like <a href='https://nodejs.org/api/http.html#http_class_http_serverresponse'>http.ServerResponse</a> but has a body property containing response body, unless stream. If stream option is enabled, a stream property will be provided to callback with a readable stream.\n*/\n\n/**\n* Sends an HTTP request\n* @param {phinOptions|string} options - phin options object (or string for auto-detection)\n* @returns {Promise<http.serverResponse>} - phin-adapted response object\n*/\nconst phin = async (opts) => {\n\tif (typeof(opts) !== 'string') {\n\t\tif (!opts.hasOwnProperty('url')) {\n\t\t\tthrow new Error('Missing url option from options for request method.')\n\t\t}\n\t}\n\n\tconst req = centra(typeof opts === 'object' ? opts.url : opts, opts.method || 'GET')\n\n\tif (opts.headers) req.header(opts.headers)\n\tif (opts.stream) req.stream()\n\tif (opts.timeout) req.timeout(opts.timeout)\n\tif (opts.data) req.body(opts.data)\n\tif (opts.form) req.body(opts.form, 'form')\n\tif (opts.compression) req.compress()\n\n\tif (typeof opts.core === 'object') {\n\t\tObject.keys(opts.core).forEach((optName) => {\n\t\t\treq.option(optName, opts.core[optName])\n\t\t})\n\t}\n\n\tconst res = await req.send()\n\n\tif (res.headers.hasOwnProperty('location') && opts.followRedirects) {\n\t\topts.url = (new URL(res.headers['location'], opts.url)).toString()\n\n\t\treturn await phin(opts)\n\t}\n\n\tif (opts.stream) {\n\t\tres.stream = res\n\n\t\treturn res\n\t}\n\telse {\n\t\tres.coreRes.body = res.body\n\n\t\tif (opts.parse && opts.parse === 'json') {\n\t\t\tres.coreRes.body = await res.json()\n\n\t\t\treturn res.coreRes\n\t\t}\n\t\telse return res.coreRes\n\t}\n}\n\n// If we're running Node.js 8+, let's promisify it\n\nphin.promisified = phin\n\nphin.unpromisified = (opts, cb) => {\n\tphin(opts).then((data) => {\n\t\tif (cb) cb(null, data)\n\t}).catch((err) => {\n\t\tif (cb) cb(err, null)\n\t})\n}\n\n// Defaults\n\nphin.defaults = (defaultOpts) => async (opts) => {\n\tconst nops = typeof opts === 'string' ? {'url': opts} : opts\n\n\tObject.keys(defaultOpts).forEach((doK) => {\n\t\tif (!nops.hasOwnProperty(doK) || nops[doK] === null) {\n\t\t\tnops[doK] = defaultOpts[doK]\n\t\t}\n\t})\n\n\treturn await phin(nops)\n}\n\nmodule.exports = phin\n",null,"module.exports = require(\"child_process\");;","module.exports = require(\"fs\");;","module.exports = require(\"http\");;","module.exports = require(\"https\");;","module.exports = require(\"os\");;","module.exports = require(\"path\");;","module.exports = require(\"querystring\");;","module.exports = require(\"url\");;","module.exports = require(\"zlib\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = __dirname + \"/\";","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(822);\n"],"mappingsnvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;AC9GA;AACA;AACA;A;;;;;;ACFA;AACA;A;;;;;;ACDA;AACA;A;;;;;;ACDA;AACA;A;;;;;;ACDA;AACA;A;;;;;;ACDA;AACA;A;;;;;;ACDA;AACA;A;;;;;;ACDA;AACA;A;;;;;;ACDA;AACA;A;;;;;;ACDA;AACA;A;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC7BA;AACA;;ACDA;AACA;AACA;AACA;;;;A","sourceRoot":""}